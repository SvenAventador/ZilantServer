const ErrorHandler = require("../errors/errorHandler")
const {
    GameMatch,
    HockeyClub
} = require("../database")
const Validation = require("../validations/validation")
const {Op} = require("sequelize")

class MatchController {
    async getOne(req, res, next) {
        const {id} = req.query

        try {
            const match = await GameMatch.findByPk(id)
            if (!match)
                return next(ErrorHandler.notFound(`–ú–∞—Ç—á —Å –Ω–æ–º–µ—Ä–æ–º ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`))

            return res.json({match})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async getAll(req, res, next) {
        try {
            const matches = await GameMatch.findAll({
                include: HockeyClub
            })

            return res.json({matches})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async create(req, res, next) {
        const {
            matchDate,
            matchTime,
            hockeyClubId
        } = req.body

        try {
            if (!(Validation.isDate(matchDate)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É! –§–æ—Ä–º–∞—Ç: YYYY-MM-DD!'))
            if (!(Validation.isTime(matchTime)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è! –§–æ—Ä–º–∞—Ç: HH:MM:SS!'))

            const currentClub = await HockeyClub.findByPk(hockeyClubId)
            if (currentClub?.clubName === '–•–ö <<–ö–ê–ò-–ó–ò–õ–ê–ù–¢>>' || !(await HockeyClub.findByPk(hockeyClubId)))
                return next(ErrorHandler.conflict(`–ö–ª—É–± —Å –Ω–æ–º–µ—Ä–æ–º ${hockeyClubId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`))

            if (new Date(matchDate).toISOString().split('T')[0] < new Date().toISOString().split('T')[0])
                return next(ErrorHandler.conflict('–ê –º—ã —á—Ç–æ, –≤ –ø—Ä–æ—à–ª–æ–º –∏–≥—Ä–∞—Ç—å —É–º–µ–µ–º? ü§£'))
            if (new Date(matchDate).toISOString().split('T')[0] === new Date().toISOString().split('T')[0])
                return next(ErrorHandler.conflict('–ù–µ –∏–∑–¥–µ–≤–∞–π—Ç–µ—Å—å –Ω–∞–¥ —Ä–µ–±—è—Ç–∞–º–∏, –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç —É–∑–Ω–∞–≤–∞—Ç—å –æ–± –∏–≥—Ä–µ –¥–µ–Ω—å –≤ –¥–µ–Ω—å! üò≠'))

            const match = await GameMatch.create({
                matchDate: new Date(matchDate),
                matchTime,
                hockeyClubId
            })

            return res.json({match})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async edit(req, res, next) {
        const {id} = req.query
        const {
            matchDate,
            matchTime,
            hockeyClubId
        } = req.body

        try {
            const currentMatch = await GameMatch.findByPk(id)
            if (!currentMatch)
                return next(ErrorHandler.notFound('–î–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§î'))

            if (!(Validation.isDate(matchDate)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É! –§–æ—Ä–º–∞—Ç: YYYY-MM-DD!'))
            if (!(Validation.isTime(matchTime)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è! –§–æ—Ä–º–∞—Ç: HH:MM:SS!'))

            const currentClub = await HockeyClub.findByPk(hockeyClubId)
            if (currentClub.clubName === '–•–ö <<–ö–ê–ò-–ó–ò–õ–ê–ù–¢>>' || !(await HockeyClub.findByPk(hockeyClubId)))
                return next(ErrorHandler.conflict(`–ö–ª—É–± —Å –Ω–æ–º–µ—Ä–æ–º ${hockeyClubId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`))

            if (new Date(matchDate).toISOString().split('T')[0] < new Date().toISOString().split('T')[0])
                return next(ErrorHandler.conflict('–ê –º—ã —á—Ç–æ, –≤ –ø—Ä–æ—à–ª–æ–º –∏–≥—Ä–∞—Ç—å —É–º–µ–µ–º? ü§£'))
            if (new Date(matchDate).toISOString().split('T')[0] === new Date().toISOString().split('T')[0])
                return next(ErrorHandler.conflict('–ù–µ –∏–∑–¥–µ–≤–∞–π—Ç–µ—Å—å –Ω–∞–¥ —Ä–µ–±—è—Ç–∞–º–∏, –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç —É–∑–Ω–∞–≤–∞—Ç—å –æ–± –∏–≥—Ä–µ –¥–µ–Ω—å –≤ –¥–µ–Ω—å! üò≠'))

            const existingGameOnDate = await GameMatch.findOne({
                where: {
                    matchDate: new Date(matchDate),
                    id: {
                        [Op.ne]: id
                    }
                }
            })

            if (existingGameOnDate && existingGameOnDate.id !== id) {
                return next(ErrorHandler.forbidden('–î–≤–µ –∏–≥—Ä—ã –≤ –¥–µ–Ω—å? –ù–µ –Ω—É–∂–Ω–æ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å! ü§¨'))
            }

            const updateMatch = {
                matchDate: matchDate || currentMatch.matchDate,
                matchTime: matchTime || currentMatch.matchTime,
                hockeyClubId: hockeyClubId || currentMatch.hockeyClubId
            }

            await currentMatch.update(updateMatch)
            return res.json({currentMatch})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async deleteOne(req, res, next) {
        const {id} = req.query

        try {
            const match = await GameMatch.findByPk(id)
            if (!match)
                return next(ErrorHandler.notFound(`–ú–∞—Ç—á —Å –Ω–æ–º–µ—Ä–æ–º ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`))

            await match.destroy()
            return res.status(200).json({message: `–ú–∞—Ç—á —Å –Ω–æ–º–µ—Ä–æ–º ${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async deleteAll(req, res, next) {
        try {
            const matches = await GameMatch.findAll()
            matches.map(async (item) => {
                await item.destroy()
            })

            return res.status(200).json({message: '–ú–∞—Ç—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!'})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }
}

module.exports = new MatchController()