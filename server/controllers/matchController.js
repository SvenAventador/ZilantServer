const ErrorHandler = require("../errors/errorHandler")
const {
    GameMatch,
    HockeyClub
} = require("../database")
const {Op} = require("sequelize")

class MatchController {
    async getOne(req, res, next) {
        const {id} = req.query

        try {
            const match = await GameMatch.findByPk(id)
            if (!match)
                return next(ErrorHandler.notFound(`–ú–∞—Ç—á —Å –Ω–æ–º–µ—Ä–æ–º ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`))

            return res.json({match})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async getAll(req, res, next) {
        try {
            const matches = await GameMatch.findAll({
                include: HockeyClub
            })

            return res.json({matches})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async create(req, res, next) {
        const {
            matchDate,
            matchTime,
            icePlace,
            hockeyClubId
        } = req.body

        try {
            const currentClub = await HockeyClub.findByPk(hockeyClubId)
            if (currentClub?.clubName === '–•–ö <<–ö–ê–ò-–ó–ò–õ–ê–ù–¢>>' || !(await HockeyClub.findByPk(hockeyClubId)))
                return next(ErrorHandler.conflict(`–ö–ª—É–± —Å –Ω–æ–º–µ—Ä–æ–º ${hockeyClubId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`))

            if (new Date(matchDate).toISOString().split('T')[0] < new Date().toISOString().split('T')[0])
                return next(ErrorHandler.conflict('–ê –º—ã —á—Ç–æ, –≤ –ø—Ä–æ—à–ª–æ–º –∏–≥—Ä–∞—Ç—å —É–º–µ–µ–º? ü§£'))
            if (new Date(matchDate).toISOString().split('T')[0] === new Date().toISOString().split('T')[0])
                return next(ErrorHandler.conflict('–ù–µ –∏–∑–¥–µ–≤–∞–π—Ç–µ—Å—å –Ω–∞–¥ —Ä–µ–±—è—Ç–∞–º–∏, –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç —É–∑–Ω–∞–≤–∞—Ç—å –æ–± –∏–≥—Ä–µ –¥–µ–Ω—å –≤ –¥–µ–Ω—å! üò≠'))

            const match = await GameMatch.create({
                matchDate: new Date(matchDate),
                icePlace,
                matchTime,
                hockeyClubId
            })

            return res.json({match})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async edit(req, res, next) {
        const {id} = req.query
        const {
            gameScore,
            hockeyClubId
        } = req.body

        try {
            const currentMatch = await GameMatch.findByPk(id)
            if (!currentMatch)
                return next(ErrorHandler.notFound('–î–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§î'))

            if (new Date(currentMatch.matchDate) >= new Date())
                return next(ErrorHandler.conflict('–ú–∞—Ç—á –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª!!'))

            const zilantClub = await HockeyClub.findByPk(1)
            const otherHC = await HockeyClub.findByPk(hockeyClubId)
            const [zilant, otherClub] = gameScore.split(':')

            if (currentMatch.gameScore !== null)
                return next(ErrorHandler.badRequest('–í –¥–∞–Ω–Ω–æ–º –º–∞—Ç—á–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç!'))

            if (zilant.includes('–û') || zilant.includes('–ë')) {
                zilantClub.clubPoint += 2
                otherHC.clubPoint += 1
            }

            if (otherClub.includes('–û') || otherClub.includes('–ë')) {
                zilantClub.clubPoint += 1
                otherHC.clubPoint += 2
            }

            if (parseInt(zilant) > parseInt(otherClub)) {
                zilantClub.clubPoint += 3
                otherHC.clubPoint += 0
            }

            if (parseInt(zilant) < parseInt(otherClub)) {
                zilantClub.clubPoint += 0
                otherHC.clubPoint += 3
            }

            await zilantClub.save()
            await otherHC.save()

            await currentMatch.update({
                gameScore
            })
            return res.json({message: "–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async deleteOne(req, res, next) {
        const {id} = req.query

        try {
            const match = await GameMatch.findByPk(id)
            if (!match)
                return next(ErrorHandler.notFound(`–ú–∞—Ç—á —Å –Ω–æ–º–µ—Ä–æ–º ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`))

            await match.destroy()
            return res.status(200).json({message: `–ú–∞—Ç—á —Å –Ω–æ–º–µ—Ä–æ–º ${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async deleteAll(req, res, next) {
        try {
            const matches = await GameMatch.findAll()
            matches.map(async (item) => {
                await item.destroy()
            })

            return res.status(200).json({message: '–ú–∞—Ç—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!'})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }
}

module.exports = new MatchController()